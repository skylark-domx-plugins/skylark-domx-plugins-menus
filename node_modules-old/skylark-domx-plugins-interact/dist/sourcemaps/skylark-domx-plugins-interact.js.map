{"version":3,"sources":["skylark-domx-plugins-interact.js"],"names":["define","skylark","attach","langx","noder","datax","geom","eventer","styler","plugins","interact","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","Movable","Plugin","inherit","klassName","pluginName","_construct","elm","options","updateWithTouchData","e","keys","i","changedTouches","split","length","updateWithMoveData","movable","self","moveEl","handleEl","this","overrided","overlayDiv","startX","startY","originalPos","handle","auto","constraints","doc","document","startingCallback","starting","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","move","button","stop","deltaX","screenX","deltaY","screenY","l","left","t","top","minX","maxX","minY","maxY","relativePosition","preventDefault","remove","cursor","docSize","getDocumentSize","ret","isPlainObject","size","css","createElement","position","width","zIndex","opacity","append","body","_handleEl","register","finder","$","Resizable","touchActionNone","border","directions","right","bottom","topLeft","topRight","bottomLeft","bottomRight","classes","all","grabber","selector","direction","minWidth","minHeight","maxWidth","maxHeight","handleResize","dir","startRect","relativeRect","currentRect","resized","isString","find","isHtmlNode","className","container","handlers","target","startSize","currentSize","resizingCallback","classPrefix","resizing","pageRect","mixin","init","appendTo","n","class","forEach","data-resize-handler","handler","select","el","startDim","rectDim","startPos","show","unselect","hide","Selectable","main"],"mappings":"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","file":"../skylark-domx-plugins-interact.js","sourcesContent":["define('skylark-domx-plugins-interact/polyfill',[],function(){\r\n\r\n});\ndefine('skylark-domx-plugins-interact/interact',[\r\n    \"skylark-langx/skylark\",\r\n    \"./polyfill\"\r\n], function(skylark) {\r\n\r\n\treturn skylark.attach(\"domx.plugins.interact\",{});\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-interact/movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function updateWithMoveData(e) {\r\n                e.movable = self;\r\n                e.moveEl = elm;\r\n                e.handleEl = handleEl;\r\n            }\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                drag,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                size,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.constraints) {\r\n                                constraints = ret.constraints;\r\n                            }\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"cursor\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/resizable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\",\r\n    \"./movable\"\r\n],function(langx,noder,datax,finder,geom,eventer,styler,$,plugins,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    var Resizable = plugins.Plugin.inherit({\r\n        klassName: \"Resizable\",\r\n\r\n        \"pluginName\" : \"lark.resizable\",\r\n        \r\n        options : {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : {\r\n                    directions : {\r\n                        top: true, //n\r\n                        left: true, //w\r\n                        right: true, //e\r\n                        bottom: true, //s\r\n                        topLeft : true, // nw\r\n                        topRight : true, // ne\r\n                        bottomLeft : true, // sw\r\n                        bottomRight : true // se                         \r\n                    },\r\n                    classes : {\r\n                        all : \"resizable-handle\",\r\n                        top : \"resizable-handle-n\",\r\n                        left: \"resizable-handle-w\",\r\n                        right: \"resizable-handle-e\",\r\n                        bottom: \"resizable-handle-s\", \r\n                        topLeft : \"resizable-handle-nw\", \r\n                        topRight : \"resizable-handle-ne\",\r\n                        bottomLeft : \"resizable-handle-sw\",             \r\n                        bottomRight : \"resizable-handle-se\"                         \r\n                    }\r\n                },\r\n                grabber: {\r\n                    selector : \"\",\r\n                    direction : \"bottomRight\"\r\n                },\r\n                selector: true\r\n            },\r\n\r\n            constraints : {\r\n                minWidth : null,\r\n                minHeight : null,\r\n                maxWidth : null,\r\n                maxHeight : null\r\n            }\r\n        },\r\n\r\n        _construct :function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n            options = this.options;\r\n            var handle = options.handle || {},\r\n                constraints = options.constraints || {},\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped;\r\n\r\n            if (langx.isString(handle)) {\r\n                handleEl = finder.find(elm,handle);\r\n            } else if (langx.isHtmlNode(handle)) {\r\n                handleEl = handle;\r\n            }\r\n\r\n            function handleResize(handleEl,dir) {\r\n                let  startRect;\r\n\r\n                Movable(handleEl,{\r\n                    auto : false,\r\n                    started : function(e) {\r\n                        startRect = geom.relativeRect(elm);\r\n                        if (startedCallback) {\r\n                            startedCallback(e);\r\n                        }\r\n                    },\r\n                    moving : function(e) {\r\n                        currentRect = {\r\n                        };\r\n                        if (dir == \"right\" || dir == \"topRight\" || dir == \"bottomRight\" ) {\r\n                            currentRect.width = startRect.width + e.deltaX;\r\n                            if (constraints.minWidth && currentRect.width < constraints.minWidth) {\r\n                                currentRect.width = constraints.minWidth;\r\n                            }\r\n                            if (constraints.maxWidth && currentRect.width > constraints.maxWidth) {\r\n                                currentRect.width = constraints.maxWidth;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"bottom\" || dir == \"bottomLeft\" || dir == \"bottomRight\" ) {\r\n                            currentRect.height = startRect.height + e.deltaY;\r\n                            if (constraints.minHeight && currentRect.height < constraints.minHeight) {\r\n                                currentRect.height = constraints.minHeight;\r\n                            }\r\n                            if (constraints.maxHeight && currentRect.height > constraints.maxHeight) {\r\n                                currentRect.height = constraints.maxHeight;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"left\" || dir == \"topLeft\" || dir == \"bottomLeft\" ) {\r\n                            currentRect.left = startRect.left + e.deltaX;\r\n                            currentRect.width = startRect.width - e.deltaX;\r\n                            if (constraints.minWidth && currentRect.width < constraints.minWidth) {\r\n                                currentRect.left = currentRect.left + currentRect.width - constraints.minWidth;\r\n                                currentRect.width = constraints.minWidth;\r\n                            }\r\n                            if (constraints.maxWidth && currentRect.width > constraints.maxWidth) {\r\n                                currentRect.left = currentRect.left + currentRect.width - constraints.maxWidth;\r\n                                currentRect.width = constraints.maxWidth;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"top\" || dir == \"topLeft\" || dir == \"topRight\" ) {\r\n                            currentRect.top = startRect.top + e.deltaY;\r\n                            currentRect.height = startRect.height - e.deltaY;\r\n                            if (constraints.minHeight && currentRect.height < constraints.minHeight) {\r\n                                currentRect.top = currentRect.top + currentRect.height - constraints.minHeight;\r\n                                currentRect.height = constraints.minHeight;\r\n                            }\r\n                            if (constraints.maxHeight && currentRect.height > constraints.maxHeight) {\r\n                                currentRect.top = currentRect.top + currentRect.height - constraints.maxHeight;\r\n                                currentRect.height = constraints.maxHeight;\r\n                            }\r\n                        } \r\n\r\n                        geom.relativeRect(elm,currentRect);\r\n\r\n                        if (movingCallback) {\r\n                            movingCallback(e);\r\n                        }\r\n                        eventer.resized(elm);\r\n\r\n                    },\r\n                    stopped: function(e) {\r\n                        if (stoppedCallback) {\r\n                            stoppedCallback(e);\r\n                        }                \r\n                    }\r\n                });\r\n            }\r\n\r\n            if (handle && handle.border) {\r\n                let borders = []\r\n                for (var dir in handle.border.directions) {\r\n                    if (handle.border.directions[dir]) {\r\n                        let handleEl = noder.createElement(\"div\",{\r\n                            \"className\": handle.border.classes.all + \" \" + handle.border.classes[dir],\r\n                            \"direction\" : dir\r\n                        },elm);   \r\n                        handleResize(handleEl,dir) ; \r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (handle && handle.grabber && handle.grabber.selector) {\r\n                 let handleEl = finder.find(elm,handle.grabber.selector);\r\n                 handleResize(handleEl,handle.grabber.direction) ; \r\n            }\r\n\r\n        },\r\n\r\n        // destroys the dragger.\r\n        remove: function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Resizable,\"resizable\");\r\n\r\n    return interact.Resizable = Resizable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/Movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function updateWithMoveData(e) {\r\n                e.movable = self;\r\n                e.moveEl = elm;\r\n                e.handleEl = handleEl;\r\n            }\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                drag,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                size,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.constraints) {\r\n                                constraints = ret.constraints;\r\n                            }\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"cursor\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/selectable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,geom,eventer,styler,$,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    var options = {\r\n        // Function which returns custom X and Y coordinates of the mouse\r\n            mousePosFetcher: null,\r\n            // Indicates custom target updating strategy\r\n            updateTarget: null,\r\n            // Function which gets HTMLElement as an arg and returns it relative position\r\n            ratioDefault: 0,\r\n            posFetcher: null,\r\n\r\n            started: null,\r\n            moving: null,\r\n            ended: null,\r\n\r\n            // Resize unit step\r\n            step: 1,\r\n\r\n            // Minimum dimension\r\n            minDim: 32,\r\n\r\n            // Maximum dimension\r\n            maxDim: '',\r\n\r\n            // Unit used for height resizing\r\n            unitHeight: 'px',\r\n\r\n            // Unit used for width resizing\r\n            unitWidth: 'px',\r\n\r\n            // The key used for height resizing\r\n            keyHeight: 'height',\r\n\r\n            // The key used for width resizing\r\n            keyWidth: 'width',\r\n\r\n            // If true, will override unitHeight and unitWidth, on start, with units\r\n            // from the current focused element (currently used only in SelectComponent)\r\n            currentUnit: 1,\r\n\r\n            // Handlers\r\n            direction : {\r\n                tl: 1, // Top left\r\n                tc: 1, // Top center\r\n                tr: 1, // Top right\r\n                cl: 1, // Center left\r\n                cr: 1, // Center right\r\n                bl: 1, // Bottom left\r\n                bc: 1, // Bottom center\r\n                br: 1 // Bottom right,\r\n            },\r\n            handler : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        } ,\r\n\r\n\r\n        currentPos,\r\n        startRect,\r\n        currentRect,\r\n        delta;\r\n\r\n    var classPrefix = \"\",\r\n        container,\r\n        handlers,\r\n        target,\r\n        direction ={\r\n            left : true,\r\n            right : true,\r\n            top : true,\r\n            bottom : true\r\n        },\r\n        startSize,\r\n        currentSize,\r\n\r\n        startedCallback,\r\n        resizingCallback,\r\n        stoppedCallback;\r\n\r\n    function init (options) {\r\n        options = options || {};\r\n        classPrefix = options.classPrefix || \"\";\r\n\r\n        var appendTo = options.appendTo || document.body;\r\n        container = noder.createElement('div',{\r\n            \"class\" : classPrefix + 'resizer-c'\r\n        });\r\n        noder.append(appendTo,container);\r\n\r\n\r\n        // Create handlers\r\n        handlers = {};\r\n        ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function(n) {\r\n            return handlers[n] = noder.createElement(\"i\",{\r\n                    \"class\" : classPrefix + 'resizer-h ' + classPrefix + 'resizer-h-' + n,\r\n                    \"data-resize-handler\" : n\r\n                });\r\n        });\r\n\r\n        for (var n in handlers) {\r\n            var handler = handlers[n];\r\n            noder.append(container,handler);\r\n            Movable(handler,{\r\n                auto : false,\r\n                started : started,\r\n                moving : resizing,\r\n                stopped : stopped\r\n            })\r\n        }\r\n    }\r\n\r\n    function started(e) {\r\n        var handler = e.target;\r\n        startSize = geom.size(target);\r\n        if (startedCallback) {\r\n            startedCallback(e);\r\n        }\r\n    }\r\n\r\n    function resizing(e) {\r\n        currentSize = {};\r\n\r\n        if (direction.left || direction.right) {\r\n            currentSize.width = startSize.width + e.deltaX;\r\n        } else {\r\n            currentSize.width = startSize.width;\r\n        }\r\n\r\n        if (direction.top || direction.bottom) {\r\n            currentSize.height = startSize.height + e.deltaY;\r\n        } else {\r\n            currentSize.height = startSize.height;\r\n        }\r\n\r\n        geom.size(target,currentSize);\r\n        geom.pageRect(container,geom.pageRect(target));\r\n\r\n        if (resizingCallback) {\r\n            resizingCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function stopped(e) {\r\n        if (stoppedCallback) {\r\n            stoppedCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function select(el,options) {\r\n        // Avoid focusing on already focused element\r\n        if (el && el === target) {\r\n          return;\r\n        } \r\n\r\n        target = el; \r\n        startDim = rectDim = startPos = null;\r\n\r\n        geom.pageRect(container,geom.pageRect(target));\r\n        styler.show(container);\r\n\r\n    }\r\n\r\n\r\n    function unselect(e) {\r\n        if (container) {\r\n            styler.hide(container);\r\n        }\r\n        target = null;\r\n    }\r\n\r\n    function isHandler(el) {\r\n        if (handlers) {\r\n            for (var n in handlers) {\r\n              if (handlers[n] === el) return true;\r\n            }                \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function docs(el) {\r\n        return [noder.ownerDoc(el), noder.doc()];\r\n    }\r\n\r\n    function selector(){\r\n      return selector;\r\n    }\r\n\r\n    langx.mixin(selector, {\r\n        init : init,\r\n\r\n        select : select,\r\n\r\n        unselect : unselect\r\n\r\n    });\r\n\r\n    return interact.Selectable = selector;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/main',[\r\n    \"./interact\",\r\n    \"./movable\",\r\n    \"./resizable\",\r\n    \"./selectable\"\r\n], function(interact) {\r\n    return interact;\r\n})\r\n;\ndefine('skylark-domx-plugins-interact', ['skylark-domx-plugins-interact/main'], function (main) { return main; });\n\n"]}